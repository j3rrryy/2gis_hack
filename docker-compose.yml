volumes:
  postgres_data:
  redis_data:

networks:
  nginx:
  backend:

services:
  nginx:
    image: nginx:1.28.0-alpine
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - nginx
    depends_on:
      # - frontend
      - backend
    container_name: nginx

  # frontend:
  #   build:
  #     context: ./src/frontend/
  #   restart: unless-stopped
  #   expose:
  #     - 80
  #   networks:
  #     - nginx
  #   container_name: frontend

  backend:
    build:
      context: ./src/backend/
    image: backend
    pull_policy: never
    restart: unless-stopped
    expose:
      - 8000
    env_file:
      - ./docker/.env
    volumes:
      - ./src/backend/:/app/
    networks:
      - nginx
      - backend
    depends_on:
      - postgres
      - redis
    container_name: backend

  worker:
    image: backend
    pull_policy: never
    restart: unless-stopped
    env_file:
      - ./docker/.env
    volumes:
      - ./src/backend/:/app/
    networks:
      - backend
    depends_on:
      - postgres
      - redis
    command: celery -A tasks.celery_app worker --loglevel=info
    container_name: worker

  postgres:
    image: kartoza/postgis:17-3.5
    restart: unless-stopped
    env_file:
      - ./docker/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - backend
    container_name: postgres

  redis:
    image: redis:8.2-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data/
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    container_name: redis
